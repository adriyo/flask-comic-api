version: "3.8"
services:
  db:
    container_name: postgres
    image: postgres:16.1-alpine3.19
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db:/data/postgres
      - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./dummy.sql:/docker-entrypoint-initdb.d/2-dummy.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"

  flask-app:
    container_name: flask-app
    build:
      context: .
      dockerfile: Dockerfile
    expose:
      - 5000
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy

  storage-service:
    container_name: storage-service
    image: alpine:latest
    build: ./services/storage
    ports:
      - "8080:8080"
    volumes:
      - storages:/app/storages

  nginx:
    build: ./services/nginx
    ports:
      - 5000:80
    depends_on:
      - flask-app
volumes:
  db:
  storages:
